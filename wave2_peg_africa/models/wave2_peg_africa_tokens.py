# -*- coding: utf-8 -*-

from odoo import models, fields, api, _, exceptions
from odoo.exceptions import UserError, ValidationError
import requests
import json
import phonenumbers
import re 
from datetime import datetime

class PaygopsTokens(models.TransientModel):
    _name = 'paygops.tokens'
    _description = 'Tokens generated'

    # migrate later v14 ----------------------------------
    #Retrieve the last element by sorting descending by time key in the dict
    def _get_last_of_list(self, list_tokens):
        return list_tokens.sort(key = lambda x: datetime.strptime(x['time'], '%Y-%m-%dT%H:%M:%S.%fZ'), reverse=True)

    def _get_duration(self, date):
        date_formatted = datetime.strptime(date, '%Y-%m-%dT%H:%M:%S.%fZ')
        return (date_formatted.replace(tzinfo=None) - datetime.utcnow()).days
    #
    # @api.multi
    def get_country(self):
        return self.env.user.company_id.country_id.code.lower()
    #
    #
    #
    #Retrieve the last token from the list of tokens generated by Paygops for the device
    # @api.multi
    def last_token_generated(self, device_serial, transaction_id, payment_id, partner_id, amount, salesperson, loan_id, phone_number, phone_number_partner, sale_order):

        params = self.env['ir.config_parameter'].sudo()
        API_GATEWAY_URL = params.get_param('api_gateway_url')
        API_GATEWAY_TOKEN = params.get_param('api_gateway_access_token')
        HEADERS = {
            "Authorization": "Bearer " + API_GATEWAY_TOKEN,
        }

        URL = API_GATEWAY_URL + "/api/v1/" + self.get_country() + "/" + device_serial + "/tokens"
        resp = requests.get(URL, headers=HEADERS)
        response = resp.json()

        if resp.status_code == 200 or resp.status_code == 201:
            if 'tokens' in response:
                if 'error_message' in response["tokens"]:
                    raise exceptions.Warning(_('PaygOps ERROR : ' + response["tokens"].get('error_message')))
                elif len(response["tokens"]) > 0:

                    tokens = response["tokens"]
                    self._get_last_of_list(tokens)
                    last_token_generated = tokens[0]

                    duration = 0
                    token_code = last_token_generated["token"]
                    credit_end_date = datetime.strptime(last_token_generated["expiration_time"], '%Y-%m-%dT%H:%M:%S.%fZ') if last_token_generated["expiration_time"] else None
                    token_id = last_token_generated["uuid"]
                    duration = self._get_duration(last_token_generated["expiration_time"]) if credit_end_date else None
                    generated_date=last_token_generated["time"]
                    token_type = last_token_generated["token_type"]
                    device_id = self.env['stock.production.lot'].search([('name', '=', device_serial)],limit=1)

                    token = self.env['credit.token'].create({'code': token_code, 'token_id': token_id, 'duration': duration, 'token_type': token_type, 'credit_end_date': credit_end_date, 'generated_date': generated_date,
                        'inventory_id': device_id.id, 'transaction_id': transaction_id, 'payment_id':payment_id, 'partner_id': partner_id, 'amount': amount, 'device_serial': device_serial,
                        'salesperson': salesperson, 'loan_id': loan_id, 'phone_number': phone_number, 'phone_number_partner': phone_number_partner})

                    sale_order.calculate_status()


            else:
                return False
        else:
            if 'error' in response:
                raise exceptions.Warning(_(response["error_message"]))
    #

    # end ------------------------------------